;; =========================================================================
;; My own changes... I worked very hard to figure them out and I'm very
;; proud of them. :-)

(setenv "LANG" "en_US.UTF-8")

(setq load-path (add-to-list 'load-path "~/.lisp.gnu"))

(package-initialize)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

(require 'helm)
(require 'helm-projectile)
;(helm-fuzzier-mode 1)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(with-eval-after-load "helm-files"
  (define-key helm-find-files-map (kbd "<C-backspace>") 'helm-find-files-up-one-level))

(add-to-list 'display-buffer-alist
	     `(,(rx bos "*helm" (* not-newline) "*" eos)
	       (display-buffer-in-side-window)
	       (inhibit-same-window . t)
	       (window-height . 0.4)))

;; (setq ido-enable-flex-matching t)
;; (setq ido-everywhere t)
;; (ido-mode 1)

(powerline-default-theme)
;(minimap-mode)

(require 'scroll-in-place)
(require 'magit)
(setq magit-last-seen-setup-instructions "1.4.0")

(auto-complete-mode -1)

(add-hook 'after-init-hook 'global-company-mode)
;(setq rtags-completions-enabled t)
(setq company-idle-delay 0)
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
;(setq rtags-autostart-diagnostics t)
;(rtags-enable-standard-keybindings)

(require 'mmm-mode)
(setq mmm-global-mode 'maybe)
(mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

(autoload 'ebib "ebib" "Ebib, a BibTeX database manager." t)

(require 'undo-tree)
(global-undo-tree-mode)

(projectile-mode)
(setq projectile-switch-project-action #'johmue/jump-to-project)
(helm-projectile-on)

(which-function-mode)


(setq gc-cons-threshold 128000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(require 'highlight-indent-guides)
(setq highlight-indent-guides-method 'bitmap)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

(setq highlight-indent-guides-auto-enabled nil)
(set-face-foreground 'highlight-indent-guides-character-face "darkgray")

(smartparens-global-mode)
(require 'smartparens-config)

;(elpy-enable)

;(setq elpy-rpc-backend "jedi")
;(setq elpy-modules '(elpy-module-company
;                     elpy-module-eldoc
;                     elpy-module-pyvenv
;                     elpy-module-yasnippet
;                     elpy-module-sane-defaults))

;(require 'rtags-xref)

(load "mode-hooks")
(load "copypaste")
(load "miscdefuns")
(load "keys")
(load "hunspellconf")
;(load "flycheck-cargo")

(setq use-dialog-box nil)

(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))

(setq split-width-threshold 210)
(setq split-height-threshold 150)

(popwin-mode 1)
(push '(compilation-mode :noselect t :height 0.3 :position bottom :tail t) popwin:special-display-config)
(push '("*Help*" :height 0.5 :position top) popwin:special-display-config)
(push '("*xref*" :height 0.3 :position bottom) popwin:special-display-config)
(push '("*grep*" :height 0.5 :position bottom) popwin:special-display-config)

(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'after-init-hook #'global-flycheck-mode)
(which-key-mode)

(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.eex\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.leex\\'" . web-mode))

(add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))

(add-to-list 'auto-mode-alist '("\\.ttl\\'" . ttl-mode))

(modify-all-frames-parameters (list (cons 'cursor-type 'bar)))

(server-start)

(setq auto-window-vscroll nil)

(delight '((abbrev-mode " Abv" "abbrev")
           (smart-tab-mode " \\t" "smart-tab")
           (eldoc-mode nil "eldoc")
           (rainbow-mode)
           (overwrite-mode " Ov" t)
	   (undo-tree-mode nil "undo-tree")
	   (auto-dim-other-buffers-mode nil "auto-dim-other-buffers")
	   (which-key-mode nil "which-key")
	   (auto-revert-mode nil t)
           (emacs-lisp-mode "Elisp" :major)))

(setq lsp-print-io nil)
(setq xref-prompt-for-identifier '(not xref-find-definitions
                                       xref-find-definitions-other-window
                                       xref-find-definitions-other-frame
                                       xref-find-references))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-modes nil)
 '(blink-cursor-mode nil)
 '(c-hanging-braces-alist
   '((brace-list-open)
     (brace-entry-open)
     (statement-cont)
     (substatement-open after)
     (block-close . c-snug-do-while)
     (extern-lang-open after)
     (namespace-open after)
     (module-open after)
     (composition-open after)
     (inexpr-class-open after)
     (inexpr-class-close before)))
 '(case-fold-search t)
 '(column-number-mode t)
 '(company-backends
   '((company-capf company-yasnippet)
     (company-web-html company-ispell company-css company-ispell company-capf company-dabbrev)
     ;(company-reftex-labels company-reftex-citations (company-auctex-macros company-auctex-symbols company-auctex-environments) company-math-symbols-latex company-latex-commands company-ispell company-capf company-dabbrev)
     (company-ispell company-capf company-dabbrev)))
 '(compilation-skip-threshold 2)
 '(cperl-indent-level 8)
 '(dired-omit-mode t t)
 '(global-font-lock-mode t nil (font-lock))
 '(global-hl-line-mode 1)
 '(global-linum-mode t)
 '(gnuserv-program (concat exec-directory "/gnuserv"))
 '(haskell-indent-spaces 8)
 '(helm-ag-base-command "rg --vimgrep --no-heading --smart-case")
 '(inferior-S+5-program-name "R")
 '(inhibit-startup-screen t)
 '(js-indent-level 8)
 '(load-home-init-file t t)
 '(lsp-clients-elixir-server-executable "elixir-ls")
 '(lsp-keymap-prefix "C-M-l")
 '(lua-indent-level 8)
 '(make-backup-files nil)
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t nil (mwheel))
 '(nxml-child-indent 8)
 '(nxml-outline-child-indent 8)
 '(package-selected-packages
   '(blacken pip-requirements pippel lsp-julia lsp-latex lsp-pyright lsp-dart lsp-jedi find-file-in-project flycheck highlight-indentation lsp-mode lsp-treemacs magit projectile transient with-editor magit-delta magithub python-pytest conda npm npm-mode elixir-yasnippets f3 helm-c-yasnippet helm-fuzzier helm-unicode fill-column-indicator highlight-indent-guides sfz-mode dap-mode ruby-end smartparens popwin flycheck-elixir mix alchemist flycheck-credo ssh-agency rainbow-delimiters elpy company-irony jedi-core jedi-direx string-inflection realgud realgud-ipdb company-anaconda company-bibtex company-math company-reftex flycheck-clang-analyzer rust-auto-use company-racer racer pungi yasnippet-snippets flycheck-rtags rtags-xref company-irony-c-headers flycheck-irony irony-eldoc isearch-project company-arduino company-auctex company-c-headers company-ctags company-dict company-emoji company-fuzzy company-jedi company-lua company-php company-rtags company-statistics company-web helm-company helm-ctest helm-fd helm-rtags helm-xref projectile-direnv projectile-variable treemacs treemacs-magit treemacs-projectile auto-virtualenv auto-dim-other-buffers jedi flycheck-yamllint pandoc rustic multi-web-mode web-mode-edit-element ttl-mode toml-mode web-mode fzf term-projectile projectile-ripgrep helm-rg yaml-mode helm-ag helm-dired-history helm-dired-recent-dirs helm-ext helm-flycheck helm-flyspell helm-git helm-git-files helm-git-grep helm-gitignore helm-helm-commands helm-ls-git helm-make helm-swoop helm-tail lua-mode beacon auctex ido-hacks ido-vertical-mode n3-mode dtrt-indent web-completion-data helm-projectile projectile-codesearch projectile-git-autofetch projectile-speedbar which-key undo-tree powerline pandoc-mode multiple-cursors minimap markdown-mode+ helm-themes helm-pydoc helm-css-scss ghci-completion ghc-imported-from ghc flycheck-rust flycheck-pyflakes flycheck-pos-tip flycheck-perl6 flycheck-haskell flycheck-cython flycheck-cstyle flycheck-css-colorguard flycheck-clangcheck cargo auto-dictionary))
 '(paren-mode 'paren nil (paren))
 '(projectile-keymap-prefix (kbd "C-c p"))
 '(show-paren-mode t nil (paren))
 '(speedbar-show-unknown-files t)
 '(speedbar-supported-extension-expressions
   '(".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".li?sp" ".p" ".java" ".f\\(90\\|77\\|or\\)?" ".ada" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".s?html" ".ma?k" "makefile\\(\\.in\\|\\.am\\)?"))
 '(split-width-threshold 200)
 '(tool-bar-mode nil nil (tool-bar))
 '(toolbar-visible-p nil)
 '(visible-bell t)
 '(w3m-coding-system 'utf-8))
;;
;;
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "LightYellow" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 80 :width normal :family "Roboto Mono"))))
 '(auto-dim-other-buffers-face ((t (:background "lemon chiffon"))))
 '(cperl-array-face ((((class color) (background light)) (:foreground "magenta4"))))
 '(cperl-hash-face ((((class color) (background light)) (:foreground "steelblue" :bold t))))
 '(cperl-nonoverridable-face ((((class color) (background light)) (:foreground "navy"))))
 '(font-latex-bold-face ((t (:weight bold))))
 '(font-latex-italic-face ((t (:slant italic))))
 '(font-latex-string-face ((t (:foreground "green4"))))
 '(font-lock-comment-face ((((class color) (background light)) (:foreground "rosybrown"))))
 '(font-lock-doc-string-face ((((class color) (background light)) (:foreground "green4"))))
 '(font-lock-function-name-face ((((class color) (background light)) (:foreground "blue4" :bold t))))
 '(font-lock-keyword-face ((((class color) (background light)) (:foreground "red3"))))
 '(font-lock-preprocessor-face ((((class color) (background light)) (:foreground "steelblue"))))
 '(font-lock-reference-face ((((class color) (background light)) (:foreground "magenta4"))))
 '(font-lock-string-face ((((class color) (background light)) (:foreground "green4"))))
 '(font-lock-type-face ((((class color) (background light)) (:foreground "navy"))))
 '(font-lock-variable-name-face ((((class color) (background light)) (:foreground "magenta4" :bold t))))
 '(green ((t (:foreground "green4"))))
 '(hl-line ((t (:background "#eefaff"))))
 '(hyper-apropos-documentation ((((class color) (background light)) (:foreground "black"))))
 '(info-node ((t (:foreground "navy" :bold t))))
 '(lsp-ui-sideline-code-action ((t (:foreground "magenta"))))
 '(magit-item-highlight ((t (:background "#ffffaa"))))
 '(powerline-active1 ((t (:background "grey22" :foreground "white"))))
 '(powerline-active2 ((t (:background "grey40" :foreground "white"))))
 '(powerline-inactive1 ((t (:background "grey11" :foreground "white"))))
 '(powerline-inactive2 ((t (:background "grey20" :foreground "gainsboro"))))
 '(rainbow-delimiters-depth-1-face ((t (:foreground "black"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "dark red"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "dark olive green"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "dark blue"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "dark orchid"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "deep sky blue"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "magenta"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "lime green"))))
 '(rainbow-delimiters-depth-9-face ((t (:foreground "deep pink"))))
 '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-unmatched-face))))
 '(rainbow-delimiters-unmatched-face ((t (:foreground "red"))))
 '(yellow ((t (:foreground "yellow4")))))

(set-fontset-font t 'unicode "Symbola" nil 'prepend)
(setq minibuffer-max-depth nil)
(setq compilation-scroll-output 'first-error)
(setq projectile-mode-line-function '(lambda () (format " <%s>" (projectile-project-name))))


(message "Init completed")
